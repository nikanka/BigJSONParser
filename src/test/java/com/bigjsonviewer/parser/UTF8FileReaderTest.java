package com.bigjsonviewer.parser;

import static org.junit.Assert.*;

import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;

import org.junit.Test;

import com.bigjsonviewer.parser.UTF8FileReader;
import com.bigjsonviewer.parser.LazyByteStreamParser.StringWithCoords;

public class UTF8FileReaderTest {
	
	public static final String testFileDir = "testFiles/";
	public static final String generatedTestFileDir = testFileDir + "autoGenerated/";
	
//	public static void main(String[] args)throws IOException {
//		new UTF8FileReaderTest().shouldReadStringStartingAtBufferSize();
//	}
	private static StringWithCoords[] createFileWithStrings(String fileName, int num, int stringBlockLimit) throws IOException{
		StringWithCoords[] generatedStrings = new StringWithCoords[num];
		try(OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(fileName), 
				Charset.forName("UTF-8").newEncoder())){
			Random rnd = new Random();
			long curPos = 0;
			for(int i = 0; i < generatedStrings.length; i++){
				// generate ASCII text between unicode strings in quotes
				int[] asciiCodePoints = new Random()
						.ints(rnd.nextInt(stringBlockLimit), 32, 128)//0, 128)
						.filter(value -> value != '"')
						.toArray();
				String betweenStrings = new String(asciiCodePoints, 0, asciiCodePoints.length) + "\"";
				writer.write(betweenStrings);
				curPos += betweenStrings.length(); // it is ASCII, so 1 symbol == 1 byte
				long openQuote = curPos - 1;
				// generate unicode string not containing quotes
				int[] wholeRangeCodePoints = new Random()
						// if I use the whole range of code points up to 0X10FFFF (or even only 0xffff - BMP)
						// I sometimes get an exception  java.nio.charset.MalformedInputException when write
						// symbols to a file
						.ints(rnd.nextInt(stringBlockLimit), 0, 0x1fff)//0XFFFF)
						.filter(value -> value != '"')
						.toArray();
				String unicodeStr = new String(wholeRangeCodePoints, 0, wholeRangeCodePoints.length);
				// possibly add a masked quote in the middle of the unicode string
				if(rnd.nextBoolean()){
					// generate the end of the unicode string after masked quote
					wholeRangeCodePoints = new Random()
							.ints(rnd.nextInt(stringBlockLimit), 0, 0x1fff)//0X10FFFF)
							.filter(value -> value != '"')
							.toArray();
					unicodeStr += "\\\""+new String(wholeRangeCodePoints, 0, wholeRangeCodePoints.length);
				}
				writer.write(unicodeStr);
				curPos += unicodeStr.getBytes("UTF8").length;
				generatedStrings[i] = new StringWithCoords(unicodeStr, openQuote, curPos);
				// close the quote
				writer.write("\"");
				curPos++;
			}
		}
		return generatedStrings;
	}
	
	@Test
	public void checkFilePos() throws IOException{
		UTF8FileReader reader = new UTF8FileReader(testFileDir + "UTF8FileReaderPositionTest.txt");
		while(reader.hasNext()){
			long pos = reader.getFilePosition();
			int ch = Integer.parseInt(""+reader.getNextChar());
			assertEquals(pos, ch);
		}
	}

	@Test 
	public void shouldFindClosingQuotesAndReadStrings() throws IOException{
		String fileName = getGeneratedFilePath("UTF8FileReaderTest_RandomStrings.txt");
		StringWithCoords[] strings = createFileWithStrings(fileName, 100, 100);
//		System.out.println(Arrays.toString(strings));
		UTF8FileReader reader = new UTF8FileReader(fileName);
		for(StringWithCoords s: strings){
			reader.getToPosition(s.getOpeningQuotePos() + 1);
			long closingQuotePos = reader.skipTheString() - 1;
			assertEquals(s.getClosingQuotePos(), closingQuotePos);
			assertEquals(UTF8FileReader.MODE_READING_ASCII_CHARS, reader.getReadingMode());
		}
	}
	
	@Test
	public  void shouldReadStringWithEscapedQuote()throws IOException {
		// prepare file
		String fileName = getGeneratedFilePath("UTF8FileReaderTest1.txt");
		FileWriter fw = new FileWriter(fileName);
		fw.write("\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\"bbbbbbbbb\"");
		fw.close();
		List<String> result = readAllStringsFromFile(fileName);
		assertEquals(1, result.size());
		assertEquals("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\"bbbbbbbbb", result.get(0));
	}
	
	@Test
	public void shouldReadStringWithQuoteAtByteBufferEdge()throws IOException {
		// prepare file
		String fileName = getGeneratedFilePath("UTF8FileReaderTest2.txt");
		FileWriter fw = new FileWriter(fileName);
		char[] prefix = new char[UTF8FileReader.bufferSize-1];
		Arrays.fill(prefix, 's');
		String str = new String(prefix);
		fw.write("\"");
		fw.write(str);
		fw.write("\"aaaaaaaaaa");// 10 'a'
		fw.close();
		List<String> result = readAllStringsFromFile(fileName);
		assertEquals(1, result.size());
		assertEquals(str, result.get(0));
	}
	@Test
	public void shouldReadStringWithQuoteAtCharBufferEdge()throws IOException {
		// prepare file
		String fileName = getGeneratedFilePath("UTF8FileReaderTest2.txt");
		FileWriter fw = new FileWriter(fileName);
		char[] prefix = new char[UTF8FileReader.bufferSize];
		Arrays.fill(prefix, 's');
		String str = new String(prefix);
		fw.write("prefix\"");
		fw.write(str);
		fw.write("\"aaaaaaaaaa");// 10 'a'
		fw.close();
		List<String> result = readAllStringsFromFile(fileName);
		assertEquals(1, result.size());
		assertEquals(str, result.get(0));
	}
	@Test
	public void shouldReadStringWithEscapedQuoteAtByteBufferEdge()throws IOException {
		// prepare file
		String fileName = getGeneratedFilePath("UTF8FileReaderTest2.txt");
		FileWriter fw = new FileWriter(fileName);
		char[] prefix = new char[UTF8FileReader.bufferSize-2];
		
		Arrays.fill(prefix, 's');
		String str = new String(prefix);
		str = str + "\\\"StringEnd";
		System.out.println(str.substring(8191));
		fw.write("\"");
		fw.write(str);
		fw.write("\"aaaaaaaaaa");// 10 'a'
		fw.close();
		List<String> result = readAllStringsFromFile(fileName);
		assertEquals(1, result.size());
		assertEquals(str, result.get(0));
	}
	@Test
	public void shouldReadStringWithEscapedQuoteAtCharBufferEdge()throws IOException {
		// prepare file
		String fileName = getGeneratedFilePath("UTF8FileReaderTest3.txt");
		FileWriter fw = new FileWriter(fileName);
		char[] prefix = new char[UTF8FileReader.bufferSize-1];
		
		Arrays.fill(prefix, 's');
		String str = new String(prefix);
		str = str + "\\\"StringEnd";
		System.out.println(str.substring(8191));
		fw.write("\"");
		fw.write(str);
		fw.write("\"aaaaaaaaaa");// 10 'a'
		fw.close();
		List<String> result = readAllStringsFromFile(fileName);
		assertEquals(1, result.size());
		assertEquals(str, result.get(0));
	}
	
	@Test
	public void shouldReadStringInRussian()throws IOException {
		// prepare file
		String fileName = getGeneratedFilePath("UTF8FileReaderTest4.txt");
		OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(fileName), 
				Charset.forName("UTF-8").newEncoder());
		String str = "Строчка\\\"\nЕще одна строчка";
		System.out.println(str);
		writer.write("\"");
		writer.write(str);
		writer.write("\" aaaaaaaaaa");// 10 'a'
		writer.close();
		List<String> result = readAllStringsFromFile(fileName);
		assertEquals(1, result.size());
		System.out.println(Arrays.toString(str.getBytes("UTF8")));
		System.out.println(Arrays.toString(result.get(0).getBytes("UTF8")));
		assertEquals(str, result.get(0));

	}
	
	private List<String> readAllStringsFromFile(String fileName)throws IOException{
		UTF8FileReader reader = new UTF8FileReader(fileName);
		List<String> result = new ArrayList<String>();
		boolean readingString = false;
		char prevChar = Character.MIN_VALUE;
		StringBuilder sb = new StringBuilder();
		while(reader.hasNext()){
			char ch = reader.getNextChar();
			if(ch == '"'){
				if(!readingString || readingString && prevChar != '\\'){
					readingString = !readingString;
					
					if(!readingString){
						result.add(sb.toString());
						sb.setLength(0);
					}
					continue;
				}
			}
			if(readingString){
				sb.append(ch);
			}
			prevChar = ch;
		}
		return result;
	}
	
	
	@Test
	public void shouldReadAllStrings()throws IOException{
		String fileName = getGeneratedFilePath("UTF8FileReaderTest5.txt");
		OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(fileName), 
				Charset.forName("UTF-8").newEncoder());
		// Empty string
		String str1 = "f";
		// long string
		char[] arr = new char[UTF8FileReader.bufferSize + 100];
		Arrays.fill(arr, 's');
		String str2 = new String(arr);
		// string in Russian
		String str3 = "Строчка\\\"\nЕще одна �?трочка";
				
		writer.write("String #1 = \""+str1+"\"; ");
		writer.write("String #2 = \""+str2+"\"; ");
		writer.write("String #3 = \""+str3+"\"; ");
		writer.close();
		List<String> result = readAllStringsFromFile(fileName);
		assertEquals(3, result.size());
		assertEquals(str1, result.get(0));
		assertEquals(str2, result.get(1));
		assertEquals(str3, result.get(2));
		
	}


	private static String getGeneratedFilePath(String fileName){
		File dir = new File(generatedTestFileDir);
		dir.mkdir();
		File file = new File(dir, fileName);
		return file.getPath();
	}
	

}
