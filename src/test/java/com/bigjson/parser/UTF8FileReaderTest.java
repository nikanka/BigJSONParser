package com.bigjson.parser;

import static org.junit.Assert.*;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.nio.charset.Charset;
import java.util.Random;

import org.junit.Test;

import com.bigjson.parser.UTF8FileReader;
import com.bigjson.parser.LazyByteStreamParser.StringWithCoords;

public class UTF8FileReaderTest {
	
	public static final String testFileDir = "testFiles/";
	public static final String generatedTestFileDir = testFileDir + "autoGenerated/";
	private static int fileInd = 1;
		
	@Test
	public void checkFilePos() throws IOException{
		UTF8FileReader reader = new UTF8FileReader(testFileDir + "UTF8FileReaderPositionTest.txt");
		while(reader.hasNext()){
			long pos = reader.getFilePosition();
			int ch = Integer.parseInt(""+reader.getNextChar());
			assertEquals(pos, ch);
		}
	}

	@Test 
	public void shouldFindClosingQuotesAndReadStrings() throws IOException{
		String fileName = getGeneratedFileName();
		StringWithCoords[] strings = createFileWithStrings(fileName, 100, 100);
//		System.out.println(Arrays.toString(strings));
		UTF8FileReader reader = new UTF8FileReader(fileName);
		for(StringWithCoords s: strings){
			reader.getToPosition(s.getOpeningQuotePos() + 1);
			long closingQuotePos = reader.skipTheString() - 1;
			assertEquals(s.getClosingQuotePos(), closingQuotePos);
			assertEquals(UTF8FileReader.MODE_READING_ASCII_CHARS, reader.getReadingMode());
		}
	}	

	private static StringWithCoords[] createFileWithStrings(String fileName, int num, int stringBlockLimit) throws IOException{
		StringWithCoords[] generatedStrings = new StringWithCoords[num];
		try(OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(fileName), 
				Charset.forName("UTF-8").newEncoder())){
			Random rnd = new Random();
			long curPos = 0;
			for(int i = 0; i < generatedStrings.length; i++){
				// generate ASCII text between unicode strings in quotes
				int[] asciiCodePoints = new Random()
						.ints(rnd.nextInt(stringBlockLimit), 32, 128)//0, 128)
						.filter(value -> value != '"')
						.toArray();
				String betweenStrings = new String(asciiCodePoints, 0, asciiCodePoints.length) + "\"";
				writer.write(betweenStrings);
				curPos += betweenStrings.length(); // it is ASCII, so 1 symbol == 1 byte
				long openQuote = curPos - 1;
				// generate unicode string not containing quotes
				int[] wholeRangeCodePoints = new Random()
						// if I use the whole range of code points up to 0X10FFFF (or even only 0xffff - BMP)
						// I sometimes get an exception  java.nio.charset.MalformedInputException when write
						// symbols to a file
						.ints(rnd.nextInt(stringBlockLimit), 0, 0x1fff)//0XFFFF)
						.filter(value -> value != '"')
						.toArray();
				String unicodeStr = new String(wholeRangeCodePoints, 0, wholeRangeCodePoints.length);
				// possibly add a masked quote in the middle of the unicode string
				if(rnd.nextBoolean()){
					// generate the end of the unicode string after masked quote
					wholeRangeCodePoints = new Random()
							.ints(rnd.nextInt(stringBlockLimit), 0, 0x1fff)//0X10FFFF)
							.filter(value -> value != '"')
							.toArray();
					unicodeStr += "\\\""+new String(wholeRangeCodePoints, 0, wholeRangeCodePoints.length);
				}
				writer.write(unicodeStr);
				curPos += unicodeStr.getBytes("UTF8").length;
				generatedStrings[i] = new StringWithCoords(unicodeStr, openQuote, curPos);
				// close the quote
				writer.write("\"");
				curPos++;
			}
		}
		return generatedStrings;
	}
	static String getGeneratedFileName(){
		String name = getGeneratedFilePath("test" + fileInd + " .txt");
		fileInd++;
		System.out.println("Current test file: " + name);
		return name;
	}
	static String getGeneratedFilePath(String fileName){
		File dir = new File(generatedTestFileDir);
		dir.mkdir();
		File file = new File(dir, fileName);
		return file.getPath();
	}
	

}
